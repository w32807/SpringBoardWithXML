REST API란 특정 기술이 아닌, 개발자 사이에서 통용되는 형식을 의미한다.
어떤 형식인지 URI만 보고 유추할 수 있는 형식을 뜻한다. (URI는 명사로 구성되는게 일반적)

1. 왜 쓸까?
	1) 개발자가 URL로 어떤 작업을 하는지 꼭 따라야 하는 기준은 없다.
		a) 게시판 리스트를 보고 싶을 때, /board/list로 할 수 있지만 /board/wonjun 으로 구현해도 상관 없다. 그런데 다른 개발자가 추후에 유지보수를 할 때 응? 하게 된다.
	2) 그래서 REST API를 사용하면 개발자가 URL만 보고 어떤 작업에 대한 URI인지 유추할 수 있는 표준을 따르게 되는 것이다.
	3) HTTP에서 GET, DELETE 방식은 URL에 그대로 정보를 전달하고, POST, PUT, PATCH를 BODY에 정보를 감추어 보낼 수 있다.
	4) 사실 어떤 방식을 써서 CRUD를 해도 상관없지만, 용도를 구분해서 사용하는 것이 바람직하다.
		a) GET - 데이터를 조회할 때 사용
		b) DELETE - 데이터를 삭제할 때 사용
		c) POST - 데이터를 추가할 때
		d) PUT - 해당 인스턴스의 모든 정보를 UPDATE 할 때 사용
		e) PATCH - 해당 인스턴스의 일부 정보를 UPDATE 할 때 사용

2. 어노테이션
	1) @RestController - Controller가 REST 방식을 처리하기 위한 것임을 명시함
		a) @RestController = @Controller(클래스 단위) + @ResponseBody(메소드 단위)로 나누어서 선언도 가능하다
	2) @ResponseBody - Controller 메소드 처리 후, JSP 같은 View로 전달 되는 것이 아닌 데이터 자체를 전달하기 위한 용도
		(비오팜 PDA같은 경우 ajax의 반환을 jsonview로 처리하였고, 여기서는 Rest로 처리함)
	3) @PathVariable - URL 경로에 있는 값을 파라미터로 추출하려고 할 때 사용
	4) @CrossOrigin - Ajax의 크로스 도메인 문제를 해결해주는 어노테이션
	5) @RequestBody - JSON 데이터를 원하는 타입으로 바인딩 처리
	
3, 좀 더 REST API에 대한 학술적 내용
	- '그런 REST API로 괜찮을가' 를 유튜브에서 검색   